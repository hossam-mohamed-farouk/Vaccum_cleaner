
vacuum_cleaner.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  00000d76  00000e0a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000d76  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001f  00800102  00800102  00000e0c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000e0c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000e3c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002b8  00000000  00000000  00000e78  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001d3a  00000000  00000000  00001130  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d63  00000000  00000000  00002e6a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000011df  00000000  00000000  00003bcd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000080c  00000000  00000000  00004dac  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000010da  00000000  00000000  000055b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000d08  00000000  00000000  00006692  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000248  00000000  00000000  0000739a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	e3 c1       	rjmp	.+966    	; 0x3cc <__vector_1>
   6:	00 00       	nop
   8:	0c c2       	rjmp	.+1048   	; 0x422 <__vector_2>
   a:	00 00       	nop
   c:	35 c2       	rjmp	.+1130   	; 0x478 <__vector_3>
   e:	00 00       	nop
  10:	5e c2       	rjmp	.+1212   	; 0x4ce <__vector_4>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	02 c3       	rjmp	.+1540   	; 0x632 <__vector_11>
  2e:	00 00       	nop
  30:	a6 c2       	rjmp	.+1356   	; 0x57e <__vector_12>
  32:	00 00       	nop
  34:	d1 c2       	rjmp	.+1442   	; 0x5d8 <__vector_13>
  36:	00 00       	nop
  38:	75 c2       	rjmp	.+1258   	; 0x524 <__vector_14>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	87 c4       	rjmp	.+2318   	; 0x974 <__vector_25>
  66:	00 00       	nop
  68:	2b c4       	rjmp	.+2134   	; 0x8c0 <__vector_26>
  6a:	00 00       	nop
  6c:	56 c4       	rjmp	.+2220   	; 0x91a <__vector_27>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	f8 c3       	rjmp	.+2032   	; 0x866 <__vector_29>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e6 e7       	ldi	r30, 0x76	; 118
  a0:	fd e0       	ldi	r31, 0x0D	; 13
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a2 30       	cpi	r26, 0x02	; 2
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a2 e0       	ldi	r26, 0x02	; 2
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a1 32       	cpi	r26, 0x21	; 33
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	02 d0       	rcall	.+4      	; 0xc8 <main>
  c4:	56 c6       	rjmp	.+3244   	; 0xd72 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <main>:
#include "vacuum_cleaner.h"

int main(void)
{
    /* Replace with your application code */
	sei();
  c8:	78 94       	sei
	//clear_bit(DDRD,0);
	//clear_bit(DDRD,1);
	//clear_bit(DDRD,2);
	
	set_bit(PORTD,0);
  ca:	90 9a       	sbi	0x12, 0	; 18
	set_bit(PORTD,1);
  cc:	91 9a       	sbi	0x12, 1	; 18
	set_bit(PORTD,2);
  ce:	92 9a       	sbi	0x12, 2	; 18

	vacuum_cleaner_init();
  d0:	83 d0       	rcall	.+262    	; 0x1d8 <vacuum_cleaner_init>
	
    while (1) 
    {
		vacuum_cleaner_start();
  d2:	a5 d0       	rcall	.+330    	; 0x21e <vacuum_cleaner_start>
  d4:	fe cf       	rjmp	.-4      	; 0xd2 <main+0xa>

000000d6 <start_stop_btn_cb>:
  d6:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <vacuum_cleaner_state>
	}
}

static void start_stop_btn_cb(void)
{
	if (vacuum_cleaner_state == VC_STOP)
  da:	81 11       	cpse	r24, r1
  dc:	08 c0       	rjmp	.+16     	; 0xee <start_stop_btn_cb+0x18>
	{
		VC_temp = 0;
  de:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <VC_temp+0x1>
  e2:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <VC_temp>
		vacuum_cleaner_state = VC_MID_SPEED;
  e6:	82 e0       	ldi	r24, 0x02	; 2
  e8:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <vacuum_cleaner_state>
  ec:	08 95       	ret
	}
	else 
	{
		VC_temp = 0;
  ee:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <VC_temp+0x1>
  f2:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <VC_temp>
		vacuum_cleaner_state = VC_STOP;
  f6:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <vacuum_cleaner_state>
  fa:	08 95       	ret

000000fc <increase_speed_btn_cb>:
	}
}

static void increase_speed_btn_cb(void)
{
	if (vacuum_cleaner_state == VC_MIN_SPEED)
  fc:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <vacuum_cleaner_state>
 100:	81 30       	cpi	r24, 0x01	; 1
 102:	21 f4       	brne	.+8      	; 0x10c <increase_speed_btn_cb+0x10>
	{
		vacuum_cleaner_state = VC_MID_SPEED;
 104:	82 e0       	ldi	r24, 0x02	; 2
 106:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <vacuum_cleaner_state>
 10a:	08 95       	ret
	} 
	else if (vacuum_cleaner_state == VC_MID_SPEED)
 10c:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <vacuum_cleaner_state>
 110:	82 30       	cpi	r24, 0x02	; 2
 112:	19 f4       	brne	.+6      	; 0x11a <increase_speed_btn_cb+0x1e>
	{
		vacuum_cleaner_state = VC_MAX_SPEED;
 114:	83 e0       	ldi	r24, 0x03	; 3
 116:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <vacuum_cleaner_state>
 11a:	08 95       	ret

0000011c <decrease_speed_btn_cb>:
	}
}

static void decrease_speed_btn_cb(void)
{
	if (vacuum_cleaner_state == VC_MAX_SPEED)
 11c:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <vacuum_cleaner_state>
 120:	83 30       	cpi	r24, 0x03	; 3
 122:	21 f4       	brne	.+8      	; 0x12c <decrease_speed_btn_cb+0x10>
	{
		vacuum_cleaner_state = VC_MID_SPEED;
 124:	82 e0       	ldi	r24, 0x02	; 2
 126:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <vacuum_cleaner_state>
 12a:	08 95       	ret
	}
	else if (vacuum_cleaner_state == VC_MID_SPEED)
 12c:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <vacuum_cleaner_state>
 130:	82 30       	cpi	r24, 0x02	; 2
 132:	19 f4       	brne	.+6      	; 0x13a <decrease_speed_btn_cb+0x1e>
	{
		vacuum_cleaner_state = VC_MIN_SPEED;
 134:	81 e0       	ldi	r24, 0x01	; 1
 136:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <vacuum_cleaner_state>
 13a:	08 95       	ret

0000013c <p_btn_handle_cb>:
	}		
}

static void p_btn_handle_cb(void)
{
	c++;
 13c:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 140:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_end+0x1>
 144:	01 96       	adiw	r24, 0x01	; 1
 146:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_end+0x1>
 14a:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
	if (c == P_BTN_TIME)
 14e:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 152:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_end+0x1>
 156:	8c 34       	cpi	r24, 0x4C	; 76
 158:	91 05       	cpc	r25, r1
 15a:	d9 f4       	brne	.+54     	; 0x192 <p_btn_handle_cb+0x56>
	{
		if (!read_bit(DDRE, PE7))
 15c:	17 99       	sbic	0x02, 7	; 2
 15e:	14 c0       	rjmp	.+40     	; 0x188 <p_btn_handle_cb+0x4c>
		{
			toggle_bit(PORTC, PC0);
 160:	95 b3       	in	r25, 0x15	; 21
 162:	81 e0       	ldi	r24, 0x01	; 1
 164:	89 27       	eor	r24, r25
 166:	85 bb       	out	0x15, r24	; 21
			if (vacuum_cleaner_state == VC_MAX_SPEED)
 168:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <vacuum_cleaner_state>
 16c:	83 30       	cpi	r24, 0x03	; 3
 16e:	21 f4       	brne	.+8      	; 0x178 <p_btn_handle_cb+0x3c>
			{
				vacuum_cleaner_state = VC_MID_SPEED;
 170:	82 e0       	ldi	r24, 0x02	; 2
 172:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <vacuum_cleaner_state>
 176:	08 95       	ret
			}
			else if (vacuum_cleaner_state == VC_MID_SPEED)
 178:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <vacuum_cleaner_state>
 17c:	82 30       	cpi	r24, 0x02	; 2
 17e:	49 f4       	brne	.+18     	; 0x192 <p_btn_handle_cb+0x56>
			{
				vacuum_cleaner_state = VC_MIN_SPEED;
 180:	81 e0       	ldi	r24, 0x01	; 1
 182:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <vacuum_cleaner_state>
 186:	08 95       	ret
				//Do nothing
			}
		}
		else
		{
			Timer3_OVF_InterruptDisable();
 188:	5e d3       	rcall	.+1724   	; 0x846 <Timer3_OVF_InterruptDisable>
			c = 0;
 18a:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <__data_end+0x1>
 18e:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <__data_end>
 192:	08 95       	ret

00000194 <p_btn_cb>:
	}
}

void p_btn_cb(void)
{	
	if (flag == 0)
 194:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <flag>
 198:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <flag+0x1>
 19c:	89 2b       	or	r24, r25
 19e:	71 f4       	brne	.+28     	; 0x1bc <p_btn_cb+0x28>
	{
		c=0;
 1a0:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <__data_end+0x1>
 1a4:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <__data_end>
		Timer3_OVF_InterruptEnable();
 1a8:	48 d3       	rcall	.+1680   	; 0x83a <Timer3_OVF_InterruptEnable>
		Timer3_InputCaptureEdge(RISING);
 1aa:	80 e0       	ldi	r24, 0x00	; 0
 1ac:	30 d3       	rcall	.+1632   	; 0x80e <Timer3_InputCaptureEdge>
		flag = 1;
 1ae:	81 e0       	ldi	r24, 0x01	; 1
 1b0:	90 e0       	ldi	r25, 0x00	; 0
 1b2:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <flag+0x1>
 1b6:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <flag>
 1ba:	08 95       	ret
	}
	else if (flag == 1)
 1bc:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <flag>
 1c0:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <flag+0x1>
 1c4:	01 97       	sbiw	r24, 0x01	; 1
 1c6:	39 f4       	brne	.+14     	; 0x1d6 <p_btn_cb+0x42>
	{
		flag = 0;
 1c8:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <flag+0x1>
 1cc:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <flag>
		Timer3_OVF_InterruptDisable();
		Timer3_InputCaptureEdge(FALLING);
 1d0:	3a d3       	rcall	.+1652   	; 0x846 <Timer3_OVF_InterruptDisable>
 1d2:	81 e0       	ldi	r24, 0x01	; 1
 1d4:	1c c3       	rjmp	.+1592   	; 0x80e <Timer3_InputCaptureEdge>
 1d6:	08 95       	ret

000001d8 <vacuum_cleaner_init>:
static void p_btn_handle_cb(void);

void vacuum_cleaner_init(void)
{
	/*Initiate the Motor driver and it will initiate the Timer_3 in PWM mode*/
	motor_init();
 1d8:	74 d0       	rcall	.+232    	; 0x2c2 <motor_init>
	/*Initiate the temp sensor*/
	temp_sens_init();
 1da:	53 d0       	rcall	.+166    	; 0x282 <temp_sens_init>
 1dc:	17 98       	cbi	0x02, 7	; 2
	/*Timer_3 initiated in Motor control module*/
	/*Config the ICU*/
	/*ICP3 Input and pulled up*/
	clear_bit(DDRE, PE7);
 1de:	1f 9a       	sbi	0x03, 7	; 3
	set_bit(PORTE, PE7);
	/*Set the ICU edge and call back functions*/
	Timer3_InputCaptureEdge(FALLING);
 1e0:	81 e0       	ldi	r24, 0x01	; 1
 1e2:	15 d3       	rcall	.+1578   	; 0x80e <Timer3_InputCaptureEdge>
	Timer3_ICU_SetCallBack(p_btn_cb);
 1e4:	8a ec       	ldi	r24, 0xCA	; 202
 1e6:	90 e0       	ldi	r25, 0x00	; 0
 1e8:	39 d3       	rcall	.+1650   	; 0x85c <Timer3_ICU_SetCallBack>
	Timer3_OVF_SetCallBack(p_btn_handle_cb);
 1ea:	8e e9       	ldi	r24, 0x9E	; 158
 1ec:	90 e0       	ldi	r25, 0x00	; 0
 1ee:	31 d3       	rcall	.+1634   	; 0x852 <Timer3_OVF_SetCallBack>
	Timer3_ICU_InterruptEnable();
 1f0:	1e d3       	rcall	.+1596   	; 0x82e <Timer3_ICU_InterruptEnable>
	/*Config the External interrupts for vacuum btns*/
	ext_enable(START_STOP_BTN, INT_SENSE_FALLING);
 1f2:	60 e0       	ldi	r22, 0x00	; 0
 1f4:	80 e0       	ldi	r24, 0x00	; 0
 1f6:	a1 d0       	rcall	.+322    	; 0x33a <ext_enable>
	ext_enable(INCREASE_SPEED_BTN, INT_SENSE_FALLING);
 1f8:	60 e0       	ldi	r22, 0x00	; 0
 1fa:	81 e0       	ldi	r24, 0x01	; 1
 1fc:	9e d0       	rcall	.+316    	; 0x33a <ext_enable>
	ext_enable(DECREASE_SPEED_BTN, INT_SENSE_FALLING);
 1fe:	60 e0       	ldi	r22, 0x00	; 0
 200:	82 e0       	ldi	r24, 0x02	; 2
 202:	9b d0       	rcall	.+310    	; 0x33a <ext_enable>
	/*Config the External interrupts call backs*/
	ext_call_setup(START_STOP_BTN, start_stop_btn_cb);
 204:	6b e6       	ldi	r22, 0x6B	; 107
 206:	70 e0       	ldi	r23, 0x00	; 0
 208:	80 e0       	ldi	r24, 0x00	; 0
 20a:	d7 d0       	rcall	.+430    	; 0x3ba <ext_call_setup>
	ext_call_setup(INCREASE_SPEED_BTN, increase_speed_btn_cb);
 20c:	6e e7       	ldi	r22, 0x7E	; 126
 20e:	70 e0       	ldi	r23, 0x00	; 0
 210:	81 e0       	ldi	r24, 0x01	; 1
 212:	d3 d0       	rcall	.+422    	; 0x3ba <ext_call_setup>
 214:	6e e8       	ldi	r22, 0x8E	; 142
	ext_call_setup(DECREASE_SPEED_BTN, decrease_speed_btn_cb);
 216:	70 e0       	ldi	r23, 0x00	; 0
 218:	82 e0       	ldi	r24, 0x02	; 2
 21a:	cf c0       	rjmp	.+414    	; 0x3ba <ext_call_setup>
 21c:	08 95       	ret

0000021e <vacuum_cleaner_start>:
 21e:	80 e0       	ldi	r24, 0x00	; 0
 220:	32 d0       	rcall	.+100    	; 0x286 <temperature_c>
}

void vacuum_cleaner_start(void)
{
	VC_temp = temperature_c(TEMP_SENS_CHANEEL);
 222:	3d d4       	rcall	.+2170   	; 0xa9e <__fixunssfsi>
 224:	70 93 05 01 	sts	0x0105, r23	; 0x800105 <VC_temp+0x1>
 228:	60 93 04 01 	sts	0x0104, r22	; 0x800104 <VC_temp>
	if ((VC_temp > VC_MAX_TEMP) && (last_vacuum_cleaner_state != VC_STOP))
 22c:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <VC_temp>
 230:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <VC_temp+0x1>
 234:	c3 97       	sbiw	r24, 0x33	; 51
 236:	48 f0       	brcs	.+18     	; 0x24a <vacuum_cleaner_start+0x2c>
 238:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 23c:	88 23       	and	r24, r24
 23e:	29 f0       	breq	.+10     	; 0x24a <vacuum_cleaner_start+0x2c>
	{
		vacuum_cleaner_state = VC_STOP;
 240:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <vacuum_cleaner_state>
		last_vacuum_cleaner_state = VC_STOP;
 244:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
 248:	08 95       	ret
	} 
	else
	{
		last_vacuum_cleaner_state = vacuum_cleaner_state;
 24a:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <vacuum_cleaner_state>
 24e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		switch(vacuum_cleaner_state)
 252:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <vacuum_cleaner_state>
 256:	81 30       	cpi	r24, 0x01	; 1
 258:	41 f0       	breq	.+16     	; 0x26a <vacuum_cleaner_start+0x4c>
 25a:	28 f0       	brcs	.+10     	; 0x266 <vacuum_cleaner_start+0x48>
 25c:	82 30       	cpi	r24, 0x02	; 2
 25e:	49 f0       	breq	.+18     	; 0x272 <vacuum_cleaner_start+0x54>
 260:	83 30       	cpi	r24, 0x03	; 3
 262:	59 f0       	breq	.+22     	; 0x27a <vacuum_cleaner_start+0x5c>
		{
			case VC_STOP:
			motor_stop();
 264:	08 95       	ret
			break;
			case VC_MIN_SPEED:
			motor_forward();
 266:	26 c0       	rjmp	.+76     	; 0x2b4 <motor_stop>
			motors_speed_select(40);
 268:	08 95       	ret
 26a:	21 d0       	rcall	.+66     	; 0x2ae <motor_forward>
			break;
			case VC_MID_SPEED:
			motor_forward();
 26c:	88 e2       	ldi	r24, 0x28	; 40
			motors_speed_select(70);
 26e:	39 c0       	rjmp	.+114    	; 0x2e2 <motors_speed_select>
 270:	08 95       	ret
 272:	1d d0       	rcall	.+58     	; 0x2ae <motor_forward>
			break;
 274:	86 e4       	ldi	r24, 0x46	; 70
			case VC_MAX_SPEED:
			motor_forward();
 276:	35 c0       	rjmp	.+106    	; 0x2e2 <motors_speed_select>
 278:	08 95       	ret
			motors_speed_select(100);
 27a:	19 d0       	rcall	.+50     	; 0x2ae <motor_forward>
 27c:	84 e6       	ldi	r24, 0x64	; 100
 27e:	31 c0       	rjmp	.+98     	; 0x2e2 <motors_speed_select>
 280:	08 95       	ret

00000282 <temp_sens_init>:
#include "lm_35_temp_sens.h"


void   temp_sens_init(void)
{
	adc_b_init();
 282:	47 c0       	rjmp	.+142    	; 0x312 <adc_b_init>
 284:	08 95       	ret

00000286 <temperature_c>:
}

FP_64 temperature_c(U_8 temp_sens_channel)
{
	U_16 adc_val = 0;
	adc_val = adc_b_read(temp_sens_channel);
 286:	4e d0       	rcall	.+156    	; 0x324 <adc_b_read>
	/*Convert back from digits to volt*/
	FP_64 voltage = (adc_val * 5.0) / 1024;
	/*Each 10 mv -> 1C*/
	return (voltage / 0.01);
 288:	bc 01       	movw	r22, r24
 28a:	80 e0       	ldi	r24, 0x00	; 0
 28c:	90 e0       	ldi	r25, 0x00	; 0
 28e:	33 d4       	rcall	.+2150   	; 0xaf6 <__floatunsisf>
 290:	20 e0       	ldi	r18, 0x00	; 0
 292:	30 e0       	ldi	r19, 0x00	; 0
 294:	40 ea       	ldi	r20, 0xA0	; 160
 296:	50 e4       	ldi	r21, 0x40	; 64
 298:	bc d4       	rcall	.+2424   	; 0xc12 <__mulsf3>
 29a:	20 e0       	ldi	r18, 0x00	; 0
 29c:	30 e0       	ldi	r19, 0x00	; 0
 29e:	40 e8       	ldi	r20, 0x80	; 128
 2a0:	5a e3       	ldi	r21, 0x3A	; 58
 2a2:	b7 d4       	rcall	.+2414   	; 0xc12 <__mulsf3>
 2a4:	2a e0       	ldi	r18, 0x0A	; 10
 2a6:	37 ed       	ldi	r19, 0xD7	; 215
 2a8:	43 e2       	ldi	r20, 0x23	; 35
 2aa:	5c e3       	ldi	r21, 0x3C	; 60
}
 2ac:	90 c3       	rjmp	.+1824   	; 0x9ce <__divsf3>

000002ae <motor_forward>:
}

void motor_reverse(void)
{
	clear_bit(MOTOR_PORT, MOTOR_PIN1);
	set_bit(MOTOR_PORT, MOTOR_PIN2);
 2ae:	d8 9a       	sbi	0x1b, 0	; 27
 2b0:	d9 98       	cbi	0x1b, 1	; 27
 2b2:	08 95       	ret

000002b4 <motor_stop>:

void motors_speed_select(U_8 speed_rate)
{
	if ((speed_rate >= MIN_SPEED_RATE) && (speed_rate <= MAX_SPEED_RATE))
	{
		OCR3B = speed_rate * MAX_SPEED / MAX_SPEED_RATE;
 2b4:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 2b8:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
}

void motor_stop(void)
{
	motors_speed_select(0);
	clear_bit(MOTOR_PORT, MOTOR_PIN1);
 2bc:	d8 98       	cbi	0x1b, 0	; 27
	clear_bit(MOTOR_PORT, MOTOR_PIN2);
 2be:	d9 98       	cbi	0x1b, 1	; 27
 2c0:	08 95       	ret

000002c2 <motor_init>:

#include "motor_control.h"

void motor_init(void)
{
	set_bit(MOTOR_DDR, MOTOR_PIN1);
 2c2:	d0 9a       	sbi	0x1a, 0	; 26
	set_bit(MOTOR_DDR, MOTOR_PIN2);
 2c4:	d1 9a       	sbi	0x1a, 1	; 26
	//SET OC0 AS OUPUT PIN
	//set_bit(DDRB, PB4);
	set_bit(DDRE, PE4);		
 2c6:	14 9a       	sbi	0x02, 4	; 2
	//PWM INIT
	//Timer0_Init(TIMER0_PHASECORRECT_MODE,TIMER0_SCALER_8,OCO_NON_INVERTING);
	Timer3_Init(TIMER3_FASTPWM_OCRA_TOP_MODE, TIMER3_SCALER_8, OCR3A_DISCONNECTED, OCR3B_NON_INVERTING);
 2c8:	22 e0       	ldi	r18, 0x02	; 2
 2ca:	40 e0       	ldi	r20, 0x00	; 0
 2cc:	62 e0       	ldi	r22, 0x02	; 2
 2ce:	84 e0       	ldi	r24, 0x04	; 4
 2d0:	dd d1       	rcall	.+954    	; 0x68c <Timer3_Init>
	OCR3A = 65535;
 2d2:	8f ef       	ldi	r24, 0xFF	; 255
 2d4:	9f ef       	ldi	r25, 0xFF	; 255
 2d6:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
 2da:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
	motor_stop();
 2de:	ea cf       	rjmp	.-44     	; 0x2b4 <motor_stop>
 2e0:	08 95       	ret

000002e2 <motors_speed_select>:
	clear_bit(MOTOR_PORT, MOTOR_PIN2);
}

void motors_speed_select(U_8 speed_rate)
{
	if ((speed_rate >= MIN_SPEED_RATE) && (speed_rate <= MAX_SPEED_RATE))
 2e2:	85 36       	cpi	r24, 0x65	; 101
 2e4:	78 f4       	brcc	.+30     	; 0x304 <motors_speed_select+0x22>
	{
		OCR3B = speed_rate * MAX_SPEED / MAX_SPEED_RATE;
 2e6:	28 2f       	mov	r18, r24
 2e8:	30 e0       	ldi	r19, 0x00	; 0
 2ea:	af ef       	ldi	r26, 0xFF	; 255
 2ec:	bf ef       	ldi	r27, 0xFF	; 255
 2ee:	10 d5       	rcall	.+2592   	; 0xd10 <__umulhisi3>
 2f0:	24 e6       	ldi	r18, 0x64	; 100
 2f2:	30 e0       	ldi	r19, 0x00	; 0
 2f4:	40 e0       	ldi	r20, 0x00	; 0
 2f6:	50 e0       	ldi	r21, 0x00	; 0
 2f8:	ef d4       	rcall	.+2526   	; 0xcd8 <__divmodsi4>
 2fa:	30 93 85 00 	sts	0x0085, r19	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 2fe:	20 93 84 00 	sts	0x0084, r18	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 302:	08 95       	ret
	{
		OCR3B = MIN_SPEED_RATE * MAX_SPEED / MAX_SPEED_RATE;
	}
	else
	{
		OCR3B = MAX_SPEED_RATE * MAX_SPEED / MAX_SPEED_RATE;
 304:	8f ef       	ldi	r24, 0xFF	; 255
 306:	9f ef       	ldi	r25, 0xFF	; 255
 308:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 30c:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 310:	08 95       	ret

00000312 <adc_b_init>:


void adc_b_init(void)
{
	/*Clock*/
	ADC_STRUCT->ADCSRA_BF.ADPS = 0b111;
 312:	86 b1       	in	r24, 0x06	; 6
 314:	87 60       	ori	r24, 0x07	; 7
 316:	86 b9       	out	0x06, r24	; 6
	/*Ref -> AVcc*/
	ADC_STRUCT->ADCMUX_BF.REFS = 0b01;
 318:	87 b1       	in	r24, 0x07	; 7
 31a:	8f 73       	andi	r24, 0x3F	; 63
 31c:	80 64       	ori	r24, 0x40	; 64
 31e:	87 b9       	out	0x07, r24	; 7
	/*Enable*/
	ADC_STRUCT->ADCSRA_BF.ADEN_B = 1;
 320:	37 9a       	sbi	0x06, 7	; 6
 322:	08 95       	ret

00000324 <adc_b_read>:
}

U_16 adc_b_read(U_8 adc_channel)
{
	/*Select channel*/
	ADC_STRUCT->ADCMUX_BF.MUX = adc_channel;
 324:	8f 71       	andi	r24, 0x1F	; 31
 326:	97 b1       	in	r25, 0x07	; 7
 328:	90 7e       	andi	r25, 0xE0	; 224
 32a:	89 2b       	or	r24, r25
 32c:	87 b9       	out	0x07, r24	; 7
	/*Start conversion*/
	ADC_STRUCT->ADCSRA_BF.ADSC_B = 1;
 32e:	36 9a       	sbi	0x06, 6	; 6
	/*Wait until conversion complete*/
	while(ADC_STRUCT->ADCSRA_BF.ADSC_B == 1);
 330:	36 99       	sbic	0x06, 6	; 6
 332:	fe cf       	rjmp	.-4      	; 0x330 <adc_b_read+0xc>
	/*Return ADC data*/
	return ADC_STRUCT->ADC_DATA;
 334:	84 b1       	in	r24, 0x04	; 4
 336:	95 b1       	in	r25, 0x05	; 5
 338:	08 95       	ret

0000033a <ext_enable>:
	//sei();					//Enable global int let to user
}

void ext_disable(INT_NUM int_num)
{
	clear_bit(EIMSK,int_num);
 33a:	66 23       	and	r22, r22
 33c:	19 f0       	breq	.+6      	; 0x344 <ext_enable+0xa>
 33e:	61 30       	cpi	r22, 0x01	; 1
 340:	89 f0       	breq	.+34     	; 0x364 <ext_enable+0x2a>
 342:	1e c0       	rjmp	.+60     	; 0x380 <ext_enable+0x46>
 344:	ea e6       	ldi	r30, 0x6A	; 106
 346:	f0 e0       	ldi	r31, 0x00	; 0
 348:	90 81       	ld	r25, Z
 34a:	21 e0       	ldi	r18, 0x01	; 1
 34c:	30 e0       	ldi	r19, 0x00	; 0
 34e:	48 2f       	mov	r20, r24
 350:	44 0f       	add	r20, r20
 352:	02 c0       	rjmp	.+4      	; 0x358 <ext_enable+0x1e>
 354:	22 0f       	add	r18, r18
 356:	33 1f       	adc	r19, r19
 358:	4a 95       	dec	r20
 35a:	e2 f7       	brpl	.-8      	; 0x354 <ext_enable+0x1a>
 35c:	20 95       	com	r18
 35e:	29 23       	and	r18, r25
 360:	20 83       	st	Z, r18
 362:	0e c0       	rjmp	.+28     	; 0x380 <ext_enable+0x46>
 364:	ea e6       	ldi	r30, 0x6A	; 106
 366:	f0 e0       	ldi	r31, 0x00	; 0
 368:	40 81       	ld	r20, Z
 36a:	21 e0       	ldi	r18, 0x01	; 1
 36c:	30 e0       	ldi	r19, 0x00	; 0
 36e:	98 2f       	mov	r25, r24
 370:	99 0f       	add	r25, r25
 372:	02 c0       	rjmp	.+4      	; 0x378 <ext_enable+0x3e>
 374:	22 0f       	add	r18, r18
 376:	33 1f       	adc	r19, r19
 378:	9a 95       	dec	r25
 37a:	e2 f7       	brpl	.-8      	; 0x374 <ext_enable+0x3a>
 37c:	24 2b       	or	r18, r20
 37e:	20 83       	st	Z, r18
 380:	ea e6       	ldi	r30, 0x6A	; 106
 382:	f0 e0       	ldi	r31, 0x00	; 0
 384:	90 81       	ld	r25, Z
 386:	48 2f       	mov	r20, r24
 388:	50 e0       	ldi	r21, 0x00	; 0
 38a:	44 0f       	add	r20, r20
 38c:	55 1f       	adc	r21, r21
 38e:	4f 5f       	subi	r20, 0xFF	; 255
 390:	5f 4f       	sbci	r21, 0xFF	; 255
 392:	21 e0       	ldi	r18, 0x01	; 1
 394:	30 e0       	ldi	r19, 0x00	; 0
 396:	b9 01       	movw	r22, r18
 398:	02 c0       	rjmp	.+4      	; 0x39e <ext_enable+0x64>
 39a:	66 0f       	add	r22, r22
 39c:	77 1f       	adc	r23, r23
 39e:	4a 95       	dec	r20
 3a0:	e2 f7       	brpl	.-8      	; 0x39a <ext_enable+0x60>
 3a2:	ab 01       	movw	r20, r22
 3a4:	49 2b       	or	r20, r25
 3a6:	40 83       	st	Z, r20
 3a8:	99 b7       	in	r25, 0x39	; 57
 3aa:	02 c0       	rjmp	.+4      	; 0x3b0 <ext_enable+0x76>
 3ac:	22 0f       	add	r18, r18
 3ae:	33 1f       	adc	r19, r19
 3b0:	8a 95       	dec	r24
 3b2:	e2 f7       	brpl	.-8      	; 0x3ac <ext_enable+0x72>
 3b4:	29 2b       	or	r18, r25
 3b6:	29 bf       	out	0x39, r18	; 57
 3b8:	08 95       	ret

000003ba <ext_call_setup>:
}

void ext_call_setup(INT_NUM int_num,void (*ptr_fun)(void))
{
	call_list[int_num] = ptr_fun; 
 3ba:	e8 2f       	mov	r30, r24
 3bc:	f0 e0       	ldi	r31, 0x00	; 0
 3be:	ee 0f       	add	r30, r30
 3c0:	ff 1f       	adc	r31, r31
 3c2:	e7 5f       	subi	r30, 0xF7	; 247
 3c4:	fe 4f       	sbci	r31, 0xFE	; 254
 3c6:	71 83       	std	Z+1, r23	; 0x01
 3c8:	60 83       	st	Z, r22
 3ca:	08 95       	ret

000003cc <__vector_1>:
}



ISR(INT0_vect)
{
 3cc:	1f 92       	push	r1
 3ce:	0f 92       	push	r0
 3d0:	0f b6       	in	r0, 0x3f	; 63
 3d2:	0f 92       	push	r0
 3d4:	11 24       	eor	r1, r1
 3d6:	0b b6       	in	r0, 0x3b	; 59
 3d8:	0f 92       	push	r0
 3da:	2f 93       	push	r18
 3dc:	3f 93       	push	r19
 3de:	4f 93       	push	r20
 3e0:	5f 93       	push	r21
 3e2:	6f 93       	push	r22
 3e4:	7f 93       	push	r23
 3e6:	8f 93       	push	r24
 3e8:	9f 93       	push	r25
 3ea:	af 93       	push	r26
 3ec:	bf 93       	push	r27
 3ee:	ef 93       	push	r30
 3f0:	ff 93       	push	r31
	call_list[INT_NUM_0]();
 3f2:	e0 91 09 01 	lds	r30, 0x0109	; 0x800109 <call_list>
 3f6:	f0 91 0a 01 	lds	r31, 0x010A	; 0x80010a <call_list+0x1>
 3fa:	09 95       	icall
}
 3fc:	ff 91       	pop	r31
 3fe:	ef 91       	pop	r30
 400:	bf 91       	pop	r27
 402:	af 91       	pop	r26
 404:	9f 91       	pop	r25
 406:	8f 91       	pop	r24
 408:	7f 91       	pop	r23
 40a:	6f 91       	pop	r22
 40c:	5f 91       	pop	r21
 40e:	4f 91       	pop	r20
 410:	3f 91       	pop	r19
 412:	2f 91       	pop	r18
 414:	0f 90       	pop	r0
 416:	0b be       	out	0x3b, r0	; 59
 418:	0f 90       	pop	r0
 41a:	0f be       	out	0x3f, r0	; 63
 41c:	0f 90       	pop	r0
 41e:	1f 90       	pop	r1
 420:	18 95       	reti

00000422 <__vector_2>:
ISR(INT1_vect)
{
 422:	1f 92       	push	r1
 424:	0f 92       	push	r0
 426:	0f b6       	in	r0, 0x3f	; 63
 428:	0f 92       	push	r0
 42a:	11 24       	eor	r1, r1
 42c:	0b b6       	in	r0, 0x3b	; 59
 42e:	0f 92       	push	r0
 430:	2f 93       	push	r18
 432:	3f 93       	push	r19
 434:	4f 93       	push	r20
 436:	5f 93       	push	r21
 438:	6f 93       	push	r22
 43a:	7f 93       	push	r23
 43c:	8f 93       	push	r24
 43e:	9f 93       	push	r25
 440:	af 93       	push	r26
 442:	bf 93       	push	r27
 444:	ef 93       	push	r30
 446:	ff 93       	push	r31
	call_list[INT_NUM_1]();
 448:	e0 91 0b 01 	lds	r30, 0x010B	; 0x80010b <call_list+0x2>
 44c:	f0 91 0c 01 	lds	r31, 0x010C	; 0x80010c <call_list+0x3>
 450:	09 95       	icall
}
 452:	ff 91       	pop	r31
 454:	ef 91       	pop	r30
 456:	bf 91       	pop	r27
 458:	af 91       	pop	r26
 45a:	9f 91       	pop	r25
 45c:	8f 91       	pop	r24
 45e:	7f 91       	pop	r23
 460:	6f 91       	pop	r22
 462:	5f 91       	pop	r21
 464:	4f 91       	pop	r20
 466:	3f 91       	pop	r19
 468:	2f 91       	pop	r18
 46a:	0f 90       	pop	r0
 46c:	0b be       	out	0x3b, r0	; 59
 46e:	0f 90       	pop	r0
 470:	0f be       	out	0x3f, r0	; 63
 472:	0f 90       	pop	r0
 474:	1f 90       	pop	r1
 476:	18 95       	reti

00000478 <__vector_3>:
ISR(INT2_vect)
{
 478:	1f 92       	push	r1
 47a:	0f 92       	push	r0
 47c:	0f b6       	in	r0, 0x3f	; 63
 47e:	0f 92       	push	r0
 480:	11 24       	eor	r1, r1
 482:	0b b6       	in	r0, 0x3b	; 59
 484:	0f 92       	push	r0
 486:	2f 93       	push	r18
 488:	3f 93       	push	r19
 48a:	4f 93       	push	r20
 48c:	5f 93       	push	r21
 48e:	6f 93       	push	r22
 490:	7f 93       	push	r23
 492:	8f 93       	push	r24
 494:	9f 93       	push	r25
 496:	af 93       	push	r26
 498:	bf 93       	push	r27
 49a:	ef 93       	push	r30
 49c:	ff 93       	push	r31
	call_list[INT_NUM_2]();
 49e:	e0 91 0d 01 	lds	r30, 0x010D	; 0x80010d <call_list+0x4>
 4a2:	f0 91 0e 01 	lds	r31, 0x010E	; 0x80010e <call_list+0x5>
 4a6:	09 95       	icall
}
 4a8:	ff 91       	pop	r31
 4aa:	ef 91       	pop	r30
 4ac:	bf 91       	pop	r27
 4ae:	af 91       	pop	r26
 4b0:	9f 91       	pop	r25
 4b2:	8f 91       	pop	r24
 4b4:	7f 91       	pop	r23
 4b6:	6f 91       	pop	r22
 4b8:	5f 91       	pop	r21
 4ba:	4f 91       	pop	r20
 4bc:	3f 91       	pop	r19
 4be:	2f 91       	pop	r18
 4c0:	0f 90       	pop	r0
 4c2:	0b be       	out	0x3b, r0	; 59
 4c4:	0f 90       	pop	r0
 4c6:	0f be       	out	0x3f, r0	; 63
 4c8:	0f 90       	pop	r0
 4ca:	1f 90       	pop	r1
 4cc:	18 95       	reti

000004ce <__vector_4>:
ISR(INT3_vect)
{
 4ce:	1f 92       	push	r1
 4d0:	0f 92       	push	r0
 4d2:	0f b6       	in	r0, 0x3f	; 63
 4d4:	0f 92       	push	r0
 4d6:	11 24       	eor	r1, r1
 4d8:	0b b6       	in	r0, 0x3b	; 59
 4da:	0f 92       	push	r0
 4dc:	2f 93       	push	r18
 4de:	3f 93       	push	r19
 4e0:	4f 93       	push	r20
 4e2:	5f 93       	push	r21
 4e4:	6f 93       	push	r22
 4e6:	7f 93       	push	r23
 4e8:	8f 93       	push	r24
 4ea:	9f 93       	push	r25
 4ec:	af 93       	push	r26
 4ee:	bf 93       	push	r27
 4f0:	ef 93       	push	r30
 4f2:	ff 93       	push	r31
	call_list[INT_NUM_3]();
 4f4:	e0 91 0f 01 	lds	r30, 0x010F	; 0x80010f <call_list+0x6>
 4f8:	f0 91 10 01 	lds	r31, 0x0110	; 0x800110 <call_list+0x7>
 4fc:	09 95       	icall
 4fe:	ff 91       	pop	r31
 500:	ef 91       	pop	r30
 502:	bf 91       	pop	r27
 504:	af 91       	pop	r26
 506:	9f 91       	pop	r25
 508:	8f 91       	pop	r24
 50a:	7f 91       	pop	r23
 50c:	6f 91       	pop	r22
 50e:	5f 91       	pop	r21
 510:	4f 91       	pop	r20
 512:	3f 91       	pop	r19
 514:	2f 91       	pop	r18
 516:	0f 90       	pop	r0
 518:	0b be       	out	0x3b, r0	; 59
 51a:	0f 90       	pop	r0
 51c:	0f be       	out	0x3f, r0	; 63
 51e:	0f 90       	pop	r0
 520:	1f 90       	pop	r1
 522:	18 95       	reti

00000524 <__vector_14>:
{
	Timer3_OCA_Fptr=LocalFptr;
}
void Timer3_OCB_SetCallBack(void(*LocalFptr)(void))
{
	Timer3_OCB_Fptr=LocalFptr;
 524:	1f 92       	push	r1
 526:	0f 92       	push	r0
 528:	0f b6       	in	r0, 0x3f	; 63
 52a:	0f 92       	push	r0
 52c:	11 24       	eor	r1, r1
 52e:	0b b6       	in	r0, 0x3b	; 59
 530:	0f 92       	push	r0
 532:	2f 93       	push	r18
 534:	3f 93       	push	r19
 536:	4f 93       	push	r20
 538:	5f 93       	push	r21
 53a:	6f 93       	push	r22
 53c:	7f 93       	push	r23
 53e:	8f 93       	push	r24
 540:	9f 93       	push	r25
 542:	af 93       	push	r26
 544:	bf 93       	push	r27
 546:	ef 93       	push	r30
 548:	ff 93       	push	r31
 54a:	e0 91 1f 01 	lds	r30, 0x011F	; 0x80011f <Timer1_OVF_Fptr>
 54e:	f0 91 20 01 	lds	r31, 0x0120	; 0x800120 <Timer1_OVF_Fptr+0x1>
 552:	30 97       	sbiw	r30, 0x00	; 0
 554:	09 f0       	breq	.+2      	; 0x558 <__vector_14+0x34>
 556:	09 95       	icall
 558:	ff 91       	pop	r31
 55a:	ef 91       	pop	r30
 55c:	bf 91       	pop	r27
 55e:	af 91       	pop	r26
 560:	9f 91       	pop	r25
 562:	8f 91       	pop	r24
 564:	7f 91       	pop	r23
 566:	6f 91       	pop	r22
 568:	5f 91       	pop	r21
 56a:	4f 91       	pop	r20
 56c:	3f 91       	pop	r19
 56e:	2f 91       	pop	r18
 570:	0f 90       	pop	r0
 572:	0b be       	out	0x3b, r0	; 59
 574:	0f 90       	pop	r0
 576:	0f be       	out	0x3f, r0	; 63
 578:	0f 90       	pop	r0
 57a:	1f 90       	pop	r1
 57c:	18 95       	reti

0000057e <__vector_12>:
 57e:	1f 92       	push	r1
 580:	0f 92       	push	r0
 582:	0f b6       	in	r0, 0x3f	; 63
 584:	0f 92       	push	r0
 586:	11 24       	eor	r1, r1
 588:	0b b6       	in	r0, 0x3b	; 59
 58a:	0f 92       	push	r0
 58c:	2f 93       	push	r18
 58e:	3f 93       	push	r19
 590:	4f 93       	push	r20
 592:	5f 93       	push	r21
 594:	6f 93       	push	r22
 596:	7f 93       	push	r23
 598:	8f 93       	push	r24
 59a:	9f 93       	push	r25
 59c:	af 93       	push	r26
 59e:	bf 93       	push	r27
 5a0:	ef 93       	push	r30
 5a2:	ff 93       	push	r31
 5a4:	e0 91 1d 01 	lds	r30, 0x011D	; 0x80011d <Timer1_OCA_Fptr>
 5a8:	f0 91 1e 01 	lds	r31, 0x011E	; 0x80011e <Timer1_OCA_Fptr+0x1>
 5ac:	30 97       	sbiw	r30, 0x00	; 0
 5ae:	09 f0       	breq	.+2      	; 0x5b2 <__vector_12+0x34>
 5b0:	09 95       	icall
 5b2:	ff 91       	pop	r31
 5b4:	ef 91       	pop	r30
 5b6:	bf 91       	pop	r27
 5b8:	af 91       	pop	r26
 5ba:	9f 91       	pop	r25
 5bc:	8f 91       	pop	r24
 5be:	7f 91       	pop	r23
 5c0:	6f 91       	pop	r22
 5c2:	5f 91       	pop	r21
 5c4:	4f 91       	pop	r20
 5c6:	3f 91       	pop	r19
 5c8:	2f 91       	pop	r18
 5ca:	0f 90       	pop	r0
 5cc:	0b be       	out	0x3b, r0	; 59
 5ce:	0f 90       	pop	r0
 5d0:	0f be       	out	0x3f, r0	; 63
 5d2:	0f 90       	pop	r0
 5d4:	1f 90       	pop	r1
 5d6:	18 95       	reti

000005d8 <__vector_13>:
 5d8:	1f 92       	push	r1
 5da:	0f 92       	push	r0
 5dc:	0f b6       	in	r0, 0x3f	; 63
 5de:	0f 92       	push	r0
 5e0:	11 24       	eor	r1, r1
 5e2:	0b b6       	in	r0, 0x3b	; 59
 5e4:	0f 92       	push	r0
 5e6:	2f 93       	push	r18
 5e8:	3f 93       	push	r19
 5ea:	4f 93       	push	r20
 5ec:	5f 93       	push	r21
 5ee:	6f 93       	push	r22
 5f0:	7f 93       	push	r23
 5f2:	8f 93       	push	r24
 5f4:	9f 93       	push	r25
 5f6:	af 93       	push	r26
 5f8:	bf 93       	push	r27
 5fa:	ef 93       	push	r30
 5fc:	ff 93       	push	r31
 5fe:	e0 91 1b 01 	lds	r30, 0x011B	; 0x80011b <Timer1_OCB_Fptr>
 602:	f0 91 1c 01 	lds	r31, 0x011C	; 0x80011c <Timer1_OCB_Fptr+0x1>
 606:	30 97       	sbiw	r30, 0x00	; 0
 608:	09 f0       	breq	.+2      	; 0x60c <__vector_13+0x34>
 60a:	09 95       	icall
 60c:	ff 91       	pop	r31
 60e:	ef 91       	pop	r30
 610:	bf 91       	pop	r27
 612:	af 91       	pop	r26
 614:	9f 91       	pop	r25
 616:	8f 91       	pop	r24
 618:	7f 91       	pop	r23
 61a:	6f 91       	pop	r22
 61c:	5f 91       	pop	r21
 61e:	4f 91       	pop	r20
 620:	3f 91       	pop	r19
 622:	2f 91       	pop	r18
 624:	0f 90       	pop	r0
 626:	0b be       	out	0x3b, r0	; 59
 628:	0f 90       	pop	r0
 62a:	0f be       	out	0x3f, r0	; 63
 62c:	0f 90       	pop	r0
 62e:	1f 90       	pop	r1
 630:	18 95       	reti

00000632 <__vector_11>:
 632:	1f 92       	push	r1
 634:	0f 92       	push	r0
 636:	0f b6       	in	r0, 0x3f	; 63
 638:	0f 92       	push	r0
 63a:	11 24       	eor	r1, r1
 63c:	0b b6       	in	r0, 0x3b	; 59
 63e:	0f 92       	push	r0
 640:	2f 93       	push	r18
 642:	3f 93       	push	r19
 644:	4f 93       	push	r20
 646:	5f 93       	push	r21
 648:	6f 93       	push	r22
 64a:	7f 93       	push	r23
 64c:	8f 93       	push	r24
 64e:	9f 93       	push	r25
 650:	af 93       	push	r26
 652:	bf 93       	push	r27
 654:	ef 93       	push	r30
 656:	ff 93       	push	r31
 658:	e0 91 19 01 	lds	r30, 0x0119	; 0x800119 <Timer1_ICU_Fptr>
 65c:	f0 91 1a 01 	lds	r31, 0x011A	; 0x80011a <Timer1_ICU_Fptr+0x1>
 660:	30 97       	sbiw	r30, 0x00	; 0
 662:	09 f0       	breq	.+2      	; 0x666 <__vector_11+0x34>
 664:	09 95       	icall
 666:	ff 91       	pop	r31
 668:	ef 91       	pop	r30
 66a:	bf 91       	pop	r27
 66c:	af 91       	pop	r26
 66e:	9f 91       	pop	r25
 670:	8f 91       	pop	r24
 672:	7f 91       	pop	r23
 674:	6f 91       	pop	r22
 676:	5f 91       	pop	r21
 678:	4f 91       	pop	r20
 67a:	3f 91       	pop	r19
 67c:	2f 91       	pop	r18
 67e:	0f 90       	pop	r0
 680:	0b be       	out	0x3b, r0	; 59
 682:	0f 90       	pop	r0
 684:	0f be       	out	0x3f, r0	; 63
 686:	0f 90       	pop	r0
 688:	1f 90       	pop	r1
 68a:	18 95       	reti

0000068c <Timer3_Init>:
 68c:	82 30       	cpi	r24, 0x02	; 2
 68e:	71 f1       	breq	.+92     	; 0x6ec <Timer3_Init+0x60>
 690:	28 f4       	brcc	.+10     	; 0x69c <Timer3_Init+0x10>
 692:	88 23       	and	r24, r24
 694:	49 f0       	breq	.+18     	; 0x6a8 <Timer3_Init+0x1c>
 696:	81 30       	cpi	r24, 0x01	; 1
 698:	c1 f0       	breq	.+48     	; 0x6ca <Timer3_Init+0x3e>
 69a:	5a c0       	rjmp	.+180    	; 0x750 <Timer3_Init+0xc4>
 69c:	83 30       	cpi	r24, 0x03	; 3
 69e:	b9 f1       	breq	.+110    	; 0x70e <Timer3_Init+0x82>
 6a0:	84 30       	cpi	r24, 0x04	; 4
 6a2:	09 f4       	brne	.+2      	; 0x6a6 <Timer3_Init+0x1a>
 6a4:	45 c0       	rjmp	.+138    	; 0x730 <Timer3_Init+0xa4>
 6a6:	54 c0       	rjmp	.+168    	; 0x750 <Timer3_Init+0xc4>
 6a8:	eb e8       	ldi	r30, 0x8B	; 139
 6aa:	f0 e0       	ldi	r31, 0x00	; 0
 6ac:	80 81       	ld	r24, Z
 6ae:	8e 7f       	andi	r24, 0xFE	; 254
 6b0:	80 83       	st	Z, r24
 6b2:	80 81       	ld	r24, Z
 6b4:	8d 7f       	andi	r24, 0xFD	; 253
 6b6:	80 83       	st	Z, r24
 6b8:	ea e8       	ldi	r30, 0x8A	; 138
 6ba:	f0 e0       	ldi	r31, 0x00	; 0
 6bc:	80 81       	ld	r24, Z
 6be:	87 7f       	andi	r24, 0xF7	; 247
 6c0:	80 83       	st	Z, r24
 6c2:	80 81       	ld	r24, Z
 6c4:	8f 7e       	andi	r24, 0xEF	; 239
 6c6:	80 83       	st	Z, r24
 6c8:	43 c0       	rjmp	.+134    	; 0x750 <Timer3_Init+0xc4>
 6ca:	eb e8       	ldi	r30, 0x8B	; 139
 6cc:	f0 e0       	ldi	r31, 0x00	; 0
 6ce:	80 81       	ld	r24, Z
 6d0:	8e 7f       	andi	r24, 0xFE	; 254
 6d2:	80 83       	st	Z, r24
 6d4:	80 81       	ld	r24, Z
 6d6:	8d 7f       	andi	r24, 0xFD	; 253
 6d8:	80 83       	st	Z, r24
 6da:	ea e8       	ldi	r30, 0x8A	; 138
 6dc:	f0 e0       	ldi	r31, 0x00	; 0
 6de:	80 81       	ld	r24, Z
 6e0:	88 60       	ori	r24, 0x08	; 8
 6e2:	80 83       	st	Z, r24
 6e4:	80 81       	ld	r24, Z
 6e6:	80 61       	ori	r24, 0x10	; 16
 6e8:	80 83       	st	Z, r24
 6ea:	32 c0       	rjmp	.+100    	; 0x750 <Timer3_Init+0xc4>
 6ec:	eb e8       	ldi	r30, 0x8B	; 139
 6ee:	f0 e0       	ldi	r31, 0x00	; 0
 6f0:	80 81       	ld	r24, Z
 6f2:	8e 7f       	andi	r24, 0xFE	; 254
 6f4:	80 83       	st	Z, r24
 6f6:	80 81       	ld	r24, Z
 6f8:	8d 7f       	andi	r24, 0xFD	; 253
 6fa:	80 83       	st	Z, r24
 6fc:	ea e8       	ldi	r30, 0x8A	; 138
 6fe:	f0 e0       	ldi	r31, 0x00	; 0
 700:	80 81       	ld	r24, Z
 702:	88 60       	ori	r24, 0x08	; 8
 704:	80 83       	st	Z, r24
 706:	80 81       	ld	r24, Z
 708:	8f 7e       	andi	r24, 0xEF	; 239
 70a:	80 83       	st	Z, r24
 70c:	21 c0       	rjmp	.+66     	; 0x750 <Timer3_Init+0xc4>
 70e:	eb e8       	ldi	r30, 0x8B	; 139
 710:	f0 e0       	ldi	r31, 0x00	; 0
 712:	80 81       	ld	r24, Z
 714:	8e 7f       	andi	r24, 0xFE	; 254
 716:	80 83       	st	Z, r24
 718:	80 81       	ld	r24, Z
 71a:	82 60       	ori	r24, 0x02	; 2
 71c:	80 83       	st	Z, r24
 71e:	ea e8       	ldi	r30, 0x8A	; 138
 720:	f0 e0       	ldi	r31, 0x00	; 0
 722:	80 81       	ld	r24, Z
 724:	88 60       	ori	r24, 0x08	; 8
 726:	80 83       	st	Z, r24
 728:	80 81       	ld	r24, Z
 72a:	80 61       	ori	r24, 0x10	; 16
 72c:	80 83       	st	Z, r24
 72e:	10 c0       	rjmp	.+32     	; 0x750 <Timer3_Init+0xc4>
 730:	eb e8       	ldi	r30, 0x8B	; 139
 732:	f0 e0       	ldi	r31, 0x00	; 0
 734:	80 81       	ld	r24, Z
 736:	81 60       	ori	r24, 0x01	; 1
 738:	80 83       	st	Z, r24
 73a:	80 81       	ld	r24, Z
 73c:	82 60       	ori	r24, 0x02	; 2
 73e:	80 83       	st	Z, r24
 740:	ea e8       	ldi	r30, 0x8A	; 138
 742:	f0 e0       	ldi	r31, 0x00	; 0
 744:	80 81       	ld	r24, Z
 746:	88 60       	ori	r24, 0x08	; 8
 748:	80 83       	st	Z, r24
 74a:	80 81       	ld	r24, Z
 74c:	80 61       	ori	r24, 0x10	; 16
 74e:	80 83       	st	Z, r24
 750:	41 30       	cpi	r20, 0x01	; 1
 752:	79 f0       	breq	.+30     	; 0x772 <Timer3_Init+0xe6>
 754:	28 f0       	brcs	.+10     	; 0x760 <Timer3_Init+0xd4>
 756:	42 30       	cpi	r20, 0x02	; 2
 758:	a9 f0       	breq	.+42     	; 0x784 <Timer3_Init+0xf8>
 75a:	43 30       	cpi	r20, 0x03	; 3
 75c:	e1 f0       	breq	.+56     	; 0x796 <Timer3_Init+0x10a>
 75e:	23 c0       	rjmp	.+70     	; 0x7a6 <Timer3_Init+0x11a>
 760:	eb e8       	ldi	r30, 0x8B	; 139
 762:	f0 e0       	ldi	r31, 0x00	; 0
 764:	80 81       	ld	r24, Z
 766:	8f 7b       	andi	r24, 0xBF	; 191
 768:	80 83       	st	Z, r24
 76a:	80 81       	ld	r24, Z
 76c:	8f 77       	andi	r24, 0x7F	; 127
 76e:	80 83       	st	Z, r24
 770:	1a c0       	rjmp	.+52     	; 0x7a6 <Timer3_Init+0x11a>
 772:	eb e8       	ldi	r30, 0x8B	; 139
 774:	f0 e0       	ldi	r31, 0x00	; 0
 776:	80 81       	ld	r24, Z
 778:	80 64       	ori	r24, 0x40	; 64
 77a:	80 83       	st	Z, r24
 77c:	80 81       	ld	r24, Z
 77e:	8f 77       	andi	r24, 0x7F	; 127
 780:	80 83       	st	Z, r24
 782:	11 c0       	rjmp	.+34     	; 0x7a6 <Timer3_Init+0x11a>
 784:	eb e8       	ldi	r30, 0x8B	; 139
 786:	f0 e0       	ldi	r31, 0x00	; 0
 788:	80 81       	ld	r24, Z
 78a:	8f 7b       	andi	r24, 0xBF	; 191
 78c:	80 83       	st	Z, r24
 78e:	80 81       	ld	r24, Z
 790:	80 68       	ori	r24, 0x80	; 128
 792:	80 83       	st	Z, r24
 794:	08 c0       	rjmp	.+16     	; 0x7a6 <Timer3_Init+0x11a>
 796:	eb e8       	ldi	r30, 0x8B	; 139
 798:	f0 e0       	ldi	r31, 0x00	; 0
 79a:	80 81       	ld	r24, Z
 79c:	80 64       	ori	r24, 0x40	; 64
 79e:	80 83       	st	Z, r24
 7a0:	80 81       	ld	r24, Z
 7a2:	80 68       	ori	r24, 0x80	; 128
 7a4:	80 83       	st	Z, r24
 7a6:	21 30       	cpi	r18, 0x01	; 1
 7a8:	79 f0       	breq	.+30     	; 0x7c8 <Timer3_Init+0x13c>
 7aa:	28 f0       	brcs	.+10     	; 0x7b6 <Timer3_Init+0x12a>
 7ac:	22 30       	cpi	r18, 0x02	; 2
 7ae:	a9 f0       	breq	.+42     	; 0x7da <Timer3_Init+0x14e>
 7b0:	23 30       	cpi	r18, 0x03	; 3
 7b2:	e1 f0       	breq	.+56     	; 0x7ec <Timer3_Init+0x160>
 7b4:	23 c0       	rjmp	.+70     	; 0x7fc <Timer3_Init+0x170>
 7b6:	eb e8       	ldi	r30, 0x8B	; 139
 7b8:	f0 e0       	ldi	r31, 0x00	; 0
 7ba:	80 81       	ld	r24, Z
 7bc:	8f 7e       	andi	r24, 0xEF	; 239
 7be:	80 83       	st	Z, r24
 7c0:	80 81       	ld	r24, Z
 7c2:	8f 7d       	andi	r24, 0xDF	; 223
 7c4:	80 83       	st	Z, r24
 7c6:	1a c0       	rjmp	.+52     	; 0x7fc <Timer3_Init+0x170>
 7c8:	eb e8       	ldi	r30, 0x8B	; 139
 7ca:	f0 e0       	ldi	r31, 0x00	; 0
 7cc:	80 81       	ld	r24, Z
 7ce:	80 61       	ori	r24, 0x10	; 16
 7d0:	80 83       	st	Z, r24
 7d2:	80 81       	ld	r24, Z
 7d4:	8f 7d       	andi	r24, 0xDF	; 223
 7d6:	80 83       	st	Z, r24
 7d8:	11 c0       	rjmp	.+34     	; 0x7fc <Timer3_Init+0x170>
 7da:	eb e8       	ldi	r30, 0x8B	; 139
 7dc:	f0 e0       	ldi	r31, 0x00	; 0
 7de:	80 81       	ld	r24, Z
 7e0:	8f 7e       	andi	r24, 0xEF	; 239
 7e2:	80 83       	st	Z, r24
 7e4:	80 81       	ld	r24, Z
 7e6:	80 62       	ori	r24, 0x20	; 32
 7e8:	80 83       	st	Z, r24
 7ea:	08 c0       	rjmp	.+16     	; 0x7fc <Timer3_Init+0x170>
 7ec:	eb e8       	ldi	r30, 0x8B	; 139
 7ee:	f0 e0       	ldi	r31, 0x00	; 0
 7f0:	80 81       	ld	r24, Z
 7f2:	80 61       	ori	r24, 0x10	; 16
 7f4:	80 83       	st	Z, r24
 7f6:	80 81       	ld	r24, Z
 7f8:	80 62       	ori	r24, 0x20	; 32
 7fa:	80 83       	st	Z, r24
 7fc:	ea e8       	ldi	r30, 0x8A	; 138
 7fe:	f0 e0       	ldi	r31, 0x00	; 0
 800:	80 81       	ld	r24, Z
 802:	88 7f       	andi	r24, 0xF8	; 248
 804:	80 83       	st	Z, r24
 806:	80 81       	ld	r24, Z
 808:	68 2b       	or	r22, r24
 80a:	60 83       	st	Z, r22
 80c:	08 95       	ret

0000080e <Timer3_InputCaptureEdge>:
 80e:	81 11       	cpse	r24, r1
 810:	06 c0       	rjmp	.+12     	; 0x81e <Timer3_InputCaptureEdge+0x10>
 812:	ea e8       	ldi	r30, 0x8A	; 138
 814:	f0 e0       	ldi	r31, 0x00	; 0
 816:	80 81       	ld	r24, Z
 818:	80 64       	ori	r24, 0x40	; 64
 81a:	80 83       	st	Z, r24
 81c:	08 95       	ret
 81e:	81 30       	cpi	r24, 0x01	; 1
 820:	29 f4       	brne	.+10     	; 0x82c <Timer3_InputCaptureEdge+0x1e>
 822:	ea e8       	ldi	r30, 0x8A	; 138
 824:	f0 e0       	ldi	r31, 0x00	; 0
 826:	80 81       	ld	r24, Z
 828:	8f 7b       	andi	r24, 0xBF	; 191
 82a:	80 83       	st	Z, r24
 82c:	08 95       	ret

0000082e <Timer3_ICU_InterruptEnable>:
 82e:	ed e7       	ldi	r30, 0x7D	; 125
 830:	f0 e0       	ldi	r31, 0x00	; 0
 832:	80 81       	ld	r24, Z
 834:	80 62       	ori	r24, 0x20	; 32
 836:	80 83       	st	Z, r24
 838:	08 95       	ret

0000083a <Timer3_OVF_InterruptEnable>:
 83a:	ed e7       	ldi	r30, 0x7D	; 125
 83c:	f0 e0       	ldi	r31, 0x00	; 0
 83e:	80 81       	ld	r24, Z
 840:	84 60       	ori	r24, 0x04	; 4
 842:	80 83       	st	Z, r24
 844:	08 95       	ret

00000846 <Timer3_OVF_InterruptDisable>:
 846:	ed e7       	ldi	r30, 0x7D	; 125
 848:	f0 e0       	ldi	r31, 0x00	; 0
 84a:	80 81       	ld	r24, Z
 84c:	8b 7f       	andi	r24, 0xFB	; 251
 84e:	80 83       	st	Z, r24
 850:	08 95       	ret

00000852 <Timer3_OVF_SetCallBack>:
 852:	90 93 18 01 	sts	0x0118, r25	; 0x800118 <Timer3_OVF_Fptr+0x1>
 856:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <Timer3_OVF_Fptr>
 85a:	08 95       	ret

0000085c <Timer3_ICU_SetCallBack>:
}
void Timer3_ICU_SetCallBack(void(*LocalFptr)(void))
{
	Timer3_ICU_Fptr=LocalFptr;
 85c:	90 93 12 01 	sts	0x0112, r25	; 0x800112 <Timer3_ICU_Fptr+0x1>
 860:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <Timer3_ICU_Fptr>
 864:	08 95       	ret

00000866 <__vector_29>:
}

/*************************Timer 3 ISR functions********************************/
ISR(TIMER3_OVF_vect)
{
 866:	1f 92       	push	r1
 868:	0f 92       	push	r0
 86a:	0f b6       	in	r0, 0x3f	; 63
 86c:	0f 92       	push	r0
 86e:	11 24       	eor	r1, r1
 870:	0b b6       	in	r0, 0x3b	; 59
 872:	0f 92       	push	r0
 874:	2f 93       	push	r18
 876:	3f 93       	push	r19
 878:	4f 93       	push	r20
 87a:	5f 93       	push	r21
 87c:	6f 93       	push	r22
 87e:	7f 93       	push	r23
 880:	8f 93       	push	r24
 882:	9f 93       	push	r25
 884:	af 93       	push	r26
 886:	bf 93       	push	r27
 888:	ef 93       	push	r30
 88a:	ff 93       	push	r31
	if(Timer3_OVF_Fptr!=NULL)
 88c:	e0 91 17 01 	lds	r30, 0x0117	; 0x800117 <Timer3_OVF_Fptr>
 890:	f0 91 18 01 	lds	r31, 0x0118	; 0x800118 <Timer3_OVF_Fptr+0x1>
 894:	30 97       	sbiw	r30, 0x00	; 0
 896:	09 f0       	breq	.+2      	; 0x89a <__vector_29+0x34>
	{
		Timer3_OVF_Fptr();
 898:	09 95       	icall
	}
}
 89a:	ff 91       	pop	r31
 89c:	ef 91       	pop	r30
 89e:	bf 91       	pop	r27
 8a0:	af 91       	pop	r26
 8a2:	9f 91       	pop	r25
 8a4:	8f 91       	pop	r24
 8a6:	7f 91       	pop	r23
 8a8:	6f 91       	pop	r22
 8aa:	5f 91       	pop	r21
 8ac:	4f 91       	pop	r20
 8ae:	3f 91       	pop	r19
 8b0:	2f 91       	pop	r18
 8b2:	0f 90       	pop	r0
 8b4:	0b be       	out	0x3b, r0	; 59
 8b6:	0f 90       	pop	r0
 8b8:	0f be       	out	0x3f, r0	; 63
 8ba:	0f 90       	pop	r0
 8bc:	1f 90       	pop	r1
 8be:	18 95       	reti

000008c0 <__vector_26>:
ISR(TIMER3_COMPA_vect)
{
 8c0:	1f 92       	push	r1
 8c2:	0f 92       	push	r0
 8c4:	0f b6       	in	r0, 0x3f	; 63
 8c6:	0f 92       	push	r0
 8c8:	11 24       	eor	r1, r1
 8ca:	0b b6       	in	r0, 0x3b	; 59
 8cc:	0f 92       	push	r0
 8ce:	2f 93       	push	r18
 8d0:	3f 93       	push	r19
 8d2:	4f 93       	push	r20
 8d4:	5f 93       	push	r21
 8d6:	6f 93       	push	r22
 8d8:	7f 93       	push	r23
 8da:	8f 93       	push	r24
 8dc:	9f 93       	push	r25
 8de:	af 93       	push	r26
 8e0:	bf 93       	push	r27
 8e2:	ef 93       	push	r30
 8e4:	ff 93       	push	r31
	if(Timer3_OCA_Fptr!=NULL)
 8e6:	e0 91 15 01 	lds	r30, 0x0115	; 0x800115 <Timer3_OCA_Fptr>
 8ea:	f0 91 16 01 	lds	r31, 0x0116	; 0x800116 <Timer3_OCA_Fptr+0x1>
 8ee:	30 97       	sbiw	r30, 0x00	; 0
 8f0:	09 f0       	breq	.+2      	; 0x8f4 <__vector_26+0x34>
	{
		Timer3_OCA_Fptr();
 8f2:	09 95       	icall
	}
}
 8f4:	ff 91       	pop	r31
 8f6:	ef 91       	pop	r30
 8f8:	bf 91       	pop	r27
 8fa:	af 91       	pop	r26
 8fc:	9f 91       	pop	r25
 8fe:	8f 91       	pop	r24
 900:	7f 91       	pop	r23
 902:	6f 91       	pop	r22
 904:	5f 91       	pop	r21
 906:	4f 91       	pop	r20
 908:	3f 91       	pop	r19
 90a:	2f 91       	pop	r18
 90c:	0f 90       	pop	r0
 90e:	0b be       	out	0x3b, r0	; 59
 910:	0f 90       	pop	r0
 912:	0f be       	out	0x3f, r0	; 63
 914:	0f 90       	pop	r0
 916:	1f 90       	pop	r1
 918:	18 95       	reti

0000091a <__vector_27>:
ISR(TIMER3_COMPB_vect)
{
 91a:	1f 92       	push	r1
 91c:	0f 92       	push	r0
 91e:	0f b6       	in	r0, 0x3f	; 63
 920:	0f 92       	push	r0
 922:	11 24       	eor	r1, r1
 924:	0b b6       	in	r0, 0x3b	; 59
 926:	0f 92       	push	r0
 928:	2f 93       	push	r18
 92a:	3f 93       	push	r19
 92c:	4f 93       	push	r20
 92e:	5f 93       	push	r21
 930:	6f 93       	push	r22
 932:	7f 93       	push	r23
 934:	8f 93       	push	r24
 936:	9f 93       	push	r25
 938:	af 93       	push	r26
 93a:	bf 93       	push	r27
 93c:	ef 93       	push	r30
 93e:	ff 93       	push	r31
	if(Timer3_OCB_Fptr!=NULL)
 940:	e0 91 13 01 	lds	r30, 0x0113	; 0x800113 <Timer3_OCB_Fptr>
 944:	f0 91 14 01 	lds	r31, 0x0114	; 0x800114 <Timer3_OCB_Fptr+0x1>
 948:	30 97       	sbiw	r30, 0x00	; 0
 94a:	09 f0       	breq	.+2      	; 0x94e <__vector_27+0x34>
	{
		Timer3_OCB_Fptr();
 94c:	09 95       	icall
	}
}
 94e:	ff 91       	pop	r31
 950:	ef 91       	pop	r30
 952:	bf 91       	pop	r27
 954:	af 91       	pop	r26
 956:	9f 91       	pop	r25
 958:	8f 91       	pop	r24
 95a:	7f 91       	pop	r23
 95c:	6f 91       	pop	r22
 95e:	5f 91       	pop	r21
 960:	4f 91       	pop	r20
 962:	3f 91       	pop	r19
 964:	2f 91       	pop	r18
 966:	0f 90       	pop	r0
 968:	0b be       	out	0x3b, r0	; 59
 96a:	0f 90       	pop	r0
 96c:	0f be       	out	0x3f, r0	; 63
 96e:	0f 90       	pop	r0
 970:	1f 90       	pop	r1
 972:	18 95       	reti

00000974 <__vector_25>:
ISR(TIMER3_CAPT_vect)
{
 974:	1f 92       	push	r1
 976:	0f 92       	push	r0
 978:	0f b6       	in	r0, 0x3f	; 63
 97a:	0f 92       	push	r0
 97c:	11 24       	eor	r1, r1
 97e:	0b b6       	in	r0, 0x3b	; 59
 980:	0f 92       	push	r0
 982:	2f 93       	push	r18
 984:	3f 93       	push	r19
 986:	4f 93       	push	r20
 988:	5f 93       	push	r21
 98a:	6f 93       	push	r22
 98c:	7f 93       	push	r23
 98e:	8f 93       	push	r24
 990:	9f 93       	push	r25
 992:	af 93       	push	r26
 994:	bf 93       	push	r27
 996:	ef 93       	push	r30
 998:	ff 93       	push	r31
	if(Timer3_ICU_Fptr!=NULL)
 99a:	e0 91 11 01 	lds	r30, 0x0111	; 0x800111 <Timer3_ICU_Fptr>
 99e:	f0 91 12 01 	lds	r31, 0x0112	; 0x800112 <Timer3_ICU_Fptr+0x1>
 9a2:	30 97       	sbiw	r30, 0x00	; 0
 9a4:	09 f0       	breq	.+2      	; 0x9a8 <__vector_25+0x34>
	{
		Timer3_ICU_Fptr();
 9a6:	09 95       	icall
	}
}
 9a8:	ff 91       	pop	r31
 9aa:	ef 91       	pop	r30
 9ac:	bf 91       	pop	r27
 9ae:	af 91       	pop	r26
 9b0:	9f 91       	pop	r25
 9b2:	8f 91       	pop	r24
 9b4:	7f 91       	pop	r23
 9b6:	6f 91       	pop	r22
 9b8:	5f 91       	pop	r21
 9ba:	4f 91       	pop	r20
 9bc:	3f 91       	pop	r19
 9be:	2f 91       	pop	r18
 9c0:	0f 90       	pop	r0
 9c2:	0b be       	out	0x3b, r0	; 59
 9c4:	0f 90       	pop	r0
 9c6:	0f be       	out	0x3f, r0	; 63
 9c8:	0f 90       	pop	r0
 9ca:	1f 90       	pop	r1
 9cc:	18 95       	reti

000009ce <__divsf3>:
 9ce:	0c d0       	rcall	.+24     	; 0x9e8 <__divsf3x>
 9d0:	e6 c0       	rjmp	.+460    	; 0xb9e <__fp_round>
 9d2:	de d0       	rcall	.+444    	; 0xb90 <__fp_pscB>
 9d4:	40 f0       	brcs	.+16     	; 0x9e6 <__divsf3+0x18>
 9d6:	d5 d0       	rcall	.+426    	; 0xb82 <__fp_pscA>
 9d8:	30 f0       	brcs	.+12     	; 0x9e6 <__divsf3+0x18>
 9da:	21 f4       	brne	.+8      	; 0x9e4 <__divsf3+0x16>
 9dc:	5f 3f       	cpi	r21, 0xFF	; 255
 9de:	19 f0       	breq	.+6      	; 0x9e6 <__divsf3+0x18>
 9e0:	c7 c0       	rjmp	.+398    	; 0xb70 <__fp_inf>
 9e2:	51 11       	cpse	r21, r1
 9e4:	10 c1       	rjmp	.+544    	; 0xc06 <__fp_szero>
 9e6:	ca c0       	rjmp	.+404    	; 0xb7c <__fp_nan>

000009e8 <__divsf3x>:
 9e8:	eb d0       	rcall	.+470    	; 0xbc0 <__fp_split3>
 9ea:	98 f3       	brcs	.-26     	; 0x9d2 <__divsf3+0x4>

000009ec <__divsf3_pse>:
 9ec:	99 23       	and	r25, r25
 9ee:	c9 f3       	breq	.-14     	; 0x9e2 <__divsf3+0x14>
 9f0:	55 23       	and	r21, r21
 9f2:	b1 f3       	breq	.-20     	; 0x9e0 <__divsf3+0x12>
 9f4:	95 1b       	sub	r25, r21
 9f6:	55 0b       	sbc	r21, r21
 9f8:	bb 27       	eor	r27, r27
 9fa:	aa 27       	eor	r26, r26
 9fc:	62 17       	cp	r22, r18
 9fe:	73 07       	cpc	r23, r19
 a00:	84 07       	cpc	r24, r20
 a02:	38 f0       	brcs	.+14     	; 0xa12 <__divsf3_pse+0x26>
 a04:	9f 5f       	subi	r25, 0xFF	; 255
 a06:	5f 4f       	sbci	r21, 0xFF	; 255
 a08:	22 0f       	add	r18, r18
 a0a:	33 1f       	adc	r19, r19
 a0c:	44 1f       	adc	r20, r20
 a0e:	aa 1f       	adc	r26, r26
 a10:	a9 f3       	breq	.-22     	; 0x9fc <__divsf3_pse+0x10>
 a12:	33 d0       	rcall	.+102    	; 0xa7a <__divsf3_pse+0x8e>
 a14:	0e 2e       	mov	r0, r30
 a16:	3a f0       	brmi	.+14     	; 0xa26 <__divsf3_pse+0x3a>
 a18:	e0 e8       	ldi	r30, 0x80	; 128
 a1a:	30 d0       	rcall	.+96     	; 0xa7c <__divsf3_pse+0x90>
 a1c:	91 50       	subi	r25, 0x01	; 1
 a1e:	50 40       	sbci	r21, 0x00	; 0
 a20:	e6 95       	lsr	r30
 a22:	00 1c       	adc	r0, r0
 a24:	ca f7       	brpl	.-14     	; 0xa18 <__divsf3_pse+0x2c>
 a26:	29 d0       	rcall	.+82     	; 0xa7a <__divsf3_pse+0x8e>
 a28:	fe 2f       	mov	r31, r30
 a2a:	27 d0       	rcall	.+78     	; 0xa7a <__divsf3_pse+0x8e>
 a2c:	66 0f       	add	r22, r22
 a2e:	77 1f       	adc	r23, r23
 a30:	88 1f       	adc	r24, r24
 a32:	bb 1f       	adc	r27, r27
 a34:	26 17       	cp	r18, r22
 a36:	37 07       	cpc	r19, r23
 a38:	48 07       	cpc	r20, r24
 a3a:	ab 07       	cpc	r26, r27
 a3c:	b0 e8       	ldi	r27, 0x80	; 128
 a3e:	09 f0       	breq	.+2      	; 0xa42 <__divsf3_pse+0x56>
 a40:	bb 0b       	sbc	r27, r27
 a42:	80 2d       	mov	r24, r0
 a44:	bf 01       	movw	r22, r30
 a46:	ff 27       	eor	r31, r31
 a48:	93 58       	subi	r25, 0x83	; 131
 a4a:	5f 4f       	sbci	r21, 0xFF	; 255
 a4c:	2a f0       	brmi	.+10     	; 0xa58 <__divsf3_pse+0x6c>
 a4e:	9e 3f       	cpi	r25, 0xFE	; 254
 a50:	51 05       	cpc	r21, r1
 a52:	68 f0       	brcs	.+26     	; 0xa6e <__divsf3_pse+0x82>
 a54:	8d c0       	rjmp	.+282    	; 0xb70 <__fp_inf>
 a56:	d7 c0       	rjmp	.+430    	; 0xc06 <__fp_szero>
 a58:	5f 3f       	cpi	r21, 0xFF	; 255
 a5a:	ec f3       	brlt	.-6      	; 0xa56 <__divsf3_pse+0x6a>
 a5c:	98 3e       	cpi	r25, 0xE8	; 232
 a5e:	dc f3       	brlt	.-10     	; 0xa56 <__divsf3_pse+0x6a>
 a60:	86 95       	lsr	r24
 a62:	77 95       	ror	r23
 a64:	67 95       	ror	r22
 a66:	b7 95       	ror	r27
 a68:	f7 95       	ror	r31
 a6a:	9f 5f       	subi	r25, 0xFF	; 255
 a6c:	c9 f7       	brne	.-14     	; 0xa60 <__divsf3_pse+0x74>
 a6e:	88 0f       	add	r24, r24
 a70:	91 1d       	adc	r25, r1
 a72:	96 95       	lsr	r25
 a74:	87 95       	ror	r24
 a76:	97 f9       	bld	r25, 7
 a78:	08 95       	ret
 a7a:	e1 e0       	ldi	r30, 0x01	; 1
 a7c:	66 0f       	add	r22, r22
 a7e:	77 1f       	adc	r23, r23
 a80:	88 1f       	adc	r24, r24
 a82:	bb 1f       	adc	r27, r27
 a84:	62 17       	cp	r22, r18
 a86:	73 07       	cpc	r23, r19
 a88:	84 07       	cpc	r24, r20
 a8a:	ba 07       	cpc	r27, r26
 a8c:	20 f0       	brcs	.+8      	; 0xa96 <__divsf3_pse+0xaa>
 a8e:	62 1b       	sub	r22, r18
 a90:	73 0b       	sbc	r23, r19
 a92:	84 0b       	sbc	r24, r20
 a94:	ba 0b       	sbc	r27, r26
 a96:	ee 1f       	adc	r30, r30
 a98:	88 f7       	brcc	.-30     	; 0xa7c <__divsf3_pse+0x90>
 a9a:	e0 95       	com	r30
 a9c:	08 95       	ret

00000a9e <__fixunssfsi>:
 a9e:	98 d0       	rcall	.+304    	; 0xbd0 <__fp_splitA>
 aa0:	88 f0       	brcs	.+34     	; 0xac4 <__fixunssfsi+0x26>
 aa2:	9f 57       	subi	r25, 0x7F	; 127
 aa4:	90 f0       	brcs	.+36     	; 0xaca <__fixunssfsi+0x2c>
 aa6:	b9 2f       	mov	r27, r25
 aa8:	99 27       	eor	r25, r25
 aaa:	b7 51       	subi	r27, 0x17	; 23
 aac:	a0 f0       	brcs	.+40     	; 0xad6 <__fixunssfsi+0x38>
 aae:	d1 f0       	breq	.+52     	; 0xae4 <__fixunssfsi+0x46>
 ab0:	66 0f       	add	r22, r22
 ab2:	77 1f       	adc	r23, r23
 ab4:	88 1f       	adc	r24, r24
 ab6:	99 1f       	adc	r25, r25
 ab8:	1a f0       	brmi	.+6      	; 0xac0 <__fixunssfsi+0x22>
 aba:	ba 95       	dec	r27
 abc:	c9 f7       	brne	.-14     	; 0xab0 <__fixunssfsi+0x12>
 abe:	12 c0       	rjmp	.+36     	; 0xae4 <__fixunssfsi+0x46>
 ac0:	b1 30       	cpi	r27, 0x01	; 1
 ac2:	81 f0       	breq	.+32     	; 0xae4 <__fixunssfsi+0x46>
 ac4:	9f d0       	rcall	.+318    	; 0xc04 <__fp_zero>
 ac6:	b1 e0       	ldi	r27, 0x01	; 1
 ac8:	08 95       	ret
 aca:	9c c0       	rjmp	.+312    	; 0xc04 <__fp_zero>
 acc:	67 2f       	mov	r22, r23
 ace:	78 2f       	mov	r23, r24
 ad0:	88 27       	eor	r24, r24
 ad2:	b8 5f       	subi	r27, 0xF8	; 248
 ad4:	39 f0       	breq	.+14     	; 0xae4 <__fixunssfsi+0x46>
 ad6:	b9 3f       	cpi	r27, 0xF9	; 249
 ad8:	cc f3       	brlt	.-14     	; 0xacc <__fixunssfsi+0x2e>
 ada:	86 95       	lsr	r24
 adc:	77 95       	ror	r23
 ade:	67 95       	ror	r22
 ae0:	b3 95       	inc	r27
 ae2:	d9 f7       	brne	.-10     	; 0xada <__fixunssfsi+0x3c>
 ae4:	3e f4       	brtc	.+14     	; 0xaf4 <__fixunssfsi+0x56>
 ae6:	90 95       	com	r25
 ae8:	80 95       	com	r24
 aea:	70 95       	com	r23
 aec:	61 95       	neg	r22
 aee:	7f 4f       	sbci	r23, 0xFF	; 255
 af0:	8f 4f       	sbci	r24, 0xFF	; 255
 af2:	9f 4f       	sbci	r25, 0xFF	; 255
 af4:	08 95       	ret

00000af6 <__floatunsisf>:
 af6:	e8 94       	clt
 af8:	09 c0       	rjmp	.+18     	; 0xb0c <__floatsisf+0x12>

00000afa <__floatsisf>:
 afa:	97 fb       	bst	r25, 7
 afc:	3e f4       	brtc	.+14     	; 0xb0c <__floatsisf+0x12>
 afe:	90 95       	com	r25
 b00:	80 95       	com	r24
 b02:	70 95       	com	r23
 b04:	61 95       	neg	r22
 b06:	7f 4f       	sbci	r23, 0xFF	; 255
 b08:	8f 4f       	sbci	r24, 0xFF	; 255
 b0a:	9f 4f       	sbci	r25, 0xFF	; 255
 b0c:	99 23       	and	r25, r25
 b0e:	a9 f0       	breq	.+42     	; 0xb3a <__floatsisf+0x40>
 b10:	f9 2f       	mov	r31, r25
 b12:	96 e9       	ldi	r25, 0x96	; 150
 b14:	bb 27       	eor	r27, r27
 b16:	93 95       	inc	r25
 b18:	f6 95       	lsr	r31
 b1a:	87 95       	ror	r24
 b1c:	77 95       	ror	r23
 b1e:	67 95       	ror	r22
 b20:	b7 95       	ror	r27
 b22:	f1 11       	cpse	r31, r1
 b24:	f8 cf       	rjmp	.-16     	; 0xb16 <__floatsisf+0x1c>
 b26:	fa f4       	brpl	.+62     	; 0xb66 <__floatsisf+0x6c>
 b28:	bb 0f       	add	r27, r27
 b2a:	11 f4       	brne	.+4      	; 0xb30 <__floatsisf+0x36>
 b2c:	60 ff       	sbrs	r22, 0
 b2e:	1b c0       	rjmp	.+54     	; 0xb66 <__floatsisf+0x6c>
 b30:	6f 5f       	subi	r22, 0xFF	; 255
 b32:	7f 4f       	sbci	r23, 0xFF	; 255
 b34:	8f 4f       	sbci	r24, 0xFF	; 255
 b36:	9f 4f       	sbci	r25, 0xFF	; 255
 b38:	16 c0       	rjmp	.+44     	; 0xb66 <__floatsisf+0x6c>
 b3a:	88 23       	and	r24, r24
 b3c:	11 f0       	breq	.+4      	; 0xb42 <__floatsisf+0x48>
 b3e:	96 e9       	ldi	r25, 0x96	; 150
 b40:	11 c0       	rjmp	.+34     	; 0xb64 <__floatsisf+0x6a>
 b42:	77 23       	and	r23, r23
 b44:	21 f0       	breq	.+8      	; 0xb4e <__floatsisf+0x54>
 b46:	9e e8       	ldi	r25, 0x8E	; 142
 b48:	87 2f       	mov	r24, r23
 b4a:	76 2f       	mov	r23, r22
 b4c:	05 c0       	rjmp	.+10     	; 0xb58 <__floatsisf+0x5e>
 b4e:	66 23       	and	r22, r22
 b50:	71 f0       	breq	.+28     	; 0xb6e <__floatsisf+0x74>
 b52:	96 e8       	ldi	r25, 0x86	; 134
 b54:	86 2f       	mov	r24, r22
 b56:	70 e0       	ldi	r23, 0x00	; 0
 b58:	60 e0       	ldi	r22, 0x00	; 0
 b5a:	2a f0       	brmi	.+10     	; 0xb66 <__floatsisf+0x6c>
 b5c:	9a 95       	dec	r25
 b5e:	66 0f       	add	r22, r22
 b60:	77 1f       	adc	r23, r23
 b62:	88 1f       	adc	r24, r24
 b64:	da f7       	brpl	.-10     	; 0xb5c <__floatsisf+0x62>
 b66:	88 0f       	add	r24, r24
 b68:	96 95       	lsr	r25
 b6a:	87 95       	ror	r24
 b6c:	97 f9       	bld	r25, 7
 b6e:	08 95       	ret

00000b70 <__fp_inf>:
 b70:	97 f9       	bld	r25, 7
 b72:	9f 67       	ori	r25, 0x7F	; 127
 b74:	80 e8       	ldi	r24, 0x80	; 128
 b76:	70 e0       	ldi	r23, 0x00	; 0
 b78:	60 e0       	ldi	r22, 0x00	; 0
 b7a:	08 95       	ret

00000b7c <__fp_nan>:
 b7c:	9f ef       	ldi	r25, 0xFF	; 255
 b7e:	80 ec       	ldi	r24, 0xC0	; 192
 b80:	08 95       	ret

00000b82 <__fp_pscA>:
 b82:	00 24       	eor	r0, r0
 b84:	0a 94       	dec	r0
 b86:	16 16       	cp	r1, r22
 b88:	17 06       	cpc	r1, r23
 b8a:	18 06       	cpc	r1, r24
 b8c:	09 06       	cpc	r0, r25
 b8e:	08 95       	ret

00000b90 <__fp_pscB>:
 b90:	00 24       	eor	r0, r0
 b92:	0a 94       	dec	r0
 b94:	12 16       	cp	r1, r18
 b96:	13 06       	cpc	r1, r19
 b98:	14 06       	cpc	r1, r20
 b9a:	05 06       	cpc	r0, r21
 b9c:	08 95       	ret

00000b9e <__fp_round>:
 b9e:	09 2e       	mov	r0, r25
 ba0:	03 94       	inc	r0
 ba2:	00 0c       	add	r0, r0
 ba4:	11 f4       	brne	.+4      	; 0xbaa <__fp_round+0xc>
 ba6:	88 23       	and	r24, r24
 ba8:	52 f0       	brmi	.+20     	; 0xbbe <__fp_round+0x20>
 baa:	bb 0f       	add	r27, r27
 bac:	40 f4       	brcc	.+16     	; 0xbbe <__fp_round+0x20>
 bae:	bf 2b       	or	r27, r31
 bb0:	11 f4       	brne	.+4      	; 0xbb6 <__fp_round+0x18>
 bb2:	60 ff       	sbrs	r22, 0
 bb4:	04 c0       	rjmp	.+8      	; 0xbbe <__fp_round+0x20>
 bb6:	6f 5f       	subi	r22, 0xFF	; 255
 bb8:	7f 4f       	sbci	r23, 0xFF	; 255
 bba:	8f 4f       	sbci	r24, 0xFF	; 255
 bbc:	9f 4f       	sbci	r25, 0xFF	; 255
 bbe:	08 95       	ret

00000bc0 <__fp_split3>:
 bc0:	57 fd       	sbrc	r21, 7
 bc2:	90 58       	subi	r25, 0x80	; 128
 bc4:	44 0f       	add	r20, r20
 bc6:	55 1f       	adc	r21, r21
 bc8:	59 f0       	breq	.+22     	; 0xbe0 <__fp_splitA+0x10>
 bca:	5f 3f       	cpi	r21, 0xFF	; 255
 bcc:	71 f0       	breq	.+28     	; 0xbea <__fp_splitA+0x1a>
 bce:	47 95       	ror	r20

00000bd0 <__fp_splitA>:
 bd0:	88 0f       	add	r24, r24
 bd2:	97 fb       	bst	r25, 7
 bd4:	99 1f       	adc	r25, r25
 bd6:	61 f0       	breq	.+24     	; 0xbf0 <__fp_splitA+0x20>
 bd8:	9f 3f       	cpi	r25, 0xFF	; 255
 bda:	79 f0       	breq	.+30     	; 0xbfa <__fp_splitA+0x2a>
 bdc:	87 95       	ror	r24
 bde:	08 95       	ret
 be0:	12 16       	cp	r1, r18
 be2:	13 06       	cpc	r1, r19
 be4:	14 06       	cpc	r1, r20
 be6:	55 1f       	adc	r21, r21
 be8:	f2 cf       	rjmp	.-28     	; 0xbce <__fp_split3+0xe>
 bea:	46 95       	lsr	r20
 bec:	f1 df       	rcall	.-30     	; 0xbd0 <__fp_splitA>
 bee:	08 c0       	rjmp	.+16     	; 0xc00 <__fp_splitA+0x30>
 bf0:	16 16       	cp	r1, r22
 bf2:	17 06       	cpc	r1, r23
 bf4:	18 06       	cpc	r1, r24
 bf6:	99 1f       	adc	r25, r25
 bf8:	f1 cf       	rjmp	.-30     	; 0xbdc <__fp_splitA+0xc>
 bfa:	86 95       	lsr	r24
 bfc:	71 05       	cpc	r23, r1
 bfe:	61 05       	cpc	r22, r1
 c00:	08 94       	sec
 c02:	08 95       	ret

00000c04 <__fp_zero>:
 c04:	e8 94       	clt

00000c06 <__fp_szero>:
 c06:	bb 27       	eor	r27, r27
 c08:	66 27       	eor	r22, r22
 c0a:	77 27       	eor	r23, r23
 c0c:	cb 01       	movw	r24, r22
 c0e:	97 f9       	bld	r25, 7
 c10:	08 95       	ret

00000c12 <__mulsf3>:
 c12:	0b d0       	rcall	.+22     	; 0xc2a <__mulsf3x>
 c14:	c4 cf       	rjmp	.-120    	; 0xb9e <__fp_round>
 c16:	b5 df       	rcall	.-150    	; 0xb82 <__fp_pscA>
 c18:	28 f0       	brcs	.+10     	; 0xc24 <__mulsf3+0x12>
 c1a:	ba df       	rcall	.-140    	; 0xb90 <__fp_pscB>
 c1c:	18 f0       	brcs	.+6      	; 0xc24 <__mulsf3+0x12>
 c1e:	95 23       	and	r25, r21
 c20:	09 f0       	breq	.+2      	; 0xc24 <__mulsf3+0x12>
 c22:	a6 cf       	rjmp	.-180    	; 0xb70 <__fp_inf>
 c24:	ab cf       	rjmp	.-170    	; 0xb7c <__fp_nan>
 c26:	11 24       	eor	r1, r1
 c28:	ee cf       	rjmp	.-36     	; 0xc06 <__fp_szero>

00000c2a <__mulsf3x>:
 c2a:	ca df       	rcall	.-108    	; 0xbc0 <__fp_split3>
 c2c:	a0 f3       	brcs	.-24     	; 0xc16 <__mulsf3+0x4>

00000c2e <__mulsf3_pse>:
 c2e:	95 9f       	mul	r25, r21
 c30:	d1 f3       	breq	.-12     	; 0xc26 <__mulsf3+0x14>
 c32:	95 0f       	add	r25, r21
 c34:	50 e0       	ldi	r21, 0x00	; 0
 c36:	55 1f       	adc	r21, r21
 c38:	62 9f       	mul	r22, r18
 c3a:	f0 01       	movw	r30, r0
 c3c:	72 9f       	mul	r23, r18
 c3e:	bb 27       	eor	r27, r27
 c40:	f0 0d       	add	r31, r0
 c42:	b1 1d       	adc	r27, r1
 c44:	63 9f       	mul	r22, r19
 c46:	aa 27       	eor	r26, r26
 c48:	f0 0d       	add	r31, r0
 c4a:	b1 1d       	adc	r27, r1
 c4c:	aa 1f       	adc	r26, r26
 c4e:	64 9f       	mul	r22, r20
 c50:	66 27       	eor	r22, r22
 c52:	b0 0d       	add	r27, r0
 c54:	a1 1d       	adc	r26, r1
 c56:	66 1f       	adc	r22, r22
 c58:	82 9f       	mul	r24, r18
 c5a:	22 27       	eor	r18, r18
 c5c:	b0 0d       	add	r27, r0
 c5e:	a1 1d       	adc	r26, r1
 c60:	62 1f       	adc	r22, r18
 c62:	73 9f       	mul	r23, r19
 c64:	b0 0d       	add	r27, r0
 c66:	a1 1d       	adc	r26, r1
 c68:	62 1f       	adc	r22, r18
 c6a:	83 9f       	mul	r24, r19
 c6c:	a0 0d       	add	r26, r0
 c6e:	61 1d       	adc	r22, r1
 c70:	22 1f       	adc	r18, r18
 c72:	74 9f       	mul	r23, r20
 c74:	33 27       	eor	r19, r19
 c76:	a0 0d       	add	r26, r0
 c78:	61 1d       	adc	r22, r1
 c7a:	23 1f       	adc	r18, r19
 c7c:	84 9f       	mul	r24, r20
 c7e:	60 0d       	add	r22, r0
 c80:	21 1d       	adc	r18, r1
 c82:	82 2f       	mov	r24, r18
 c84:	76 2f       	mov	r23, r22
 c86:	6a 2f       	mov	r22, r26
 c88:	11 24       	eor	r1, r1
 c8a:	9f 57       	subi	r25, 0x7F	; 127
 c8c:	50 40       	sbci	r21, 0x00	; 0
 c8e:	8a f0       	brmi	.+34     	; 0xcb2 <__mulsf3_pse+0x84>
 c90:	e1 f0       	breq	.+56     	; 0xcca <__mulsf3_pse+0x9c>
 c92:	88 23       	and	r24, r24
 c94:	4a f0       	brmi	.+18     	; 0xca8 <__mulsf3_pse+0x7a>
 c96:	ee 0f       	add	r30, r30
 c98:	ff 1f       	adc	r31, r31
 c9a:	bb 1f       	adc	r27, r27
 c9c:	66 1f       	adc	r22, r22
 c9e:	77 1f       	adc	r23, r23
 ca0:	88 1f       	adc	r24, r24
 ca2:	91 50       	subi	r25, 0x01	; 1
 ca4:	50 40       	sbci	r21, 0x00	; 0
 ca6:	a9 f7       	brne	.-22     	; 0xc92 <__mulsf3_pse+0x64>
 ca8:	9e 3f       	cpi	r25, 0xFE	; 254
 caa:	51 05       	cpc	r21, r1
 cac:	70 f0       	brcs	.+28     	; 0xcca <__mulsf3_pse+0x9c>
 cae:	60 cf       	rjmp	.-320    	; 0xb70 <__fp_inf>
 cb0:	aa cf       	rjmp	.-172    	; 0xc06 <__fp_szero>
 cb2:	5f 3f       	cpi	r21, 0xFF	; 255
 cb4:	ec f3       	brlt	.-6      	; 0xcb0 <__mulsf3_pse+0x82>
 cb6:	98 3e       	cpi	r25, 0xE8	; 232
 cb8:	dc f3       	brlt	.-10     	; 0xcb0 <__mulsf3_pse+0x82>
 cba:	86 95       	lsr	r24
 cbc:	77 95       	ror	r23
 cbe:	67 95       	ror	r22
 cc0:	b7 95       	ror	r27
 cc2:	f7 95       	ror	r31
 cc4:	e7 95       	ror	r30
 cc6:	9f 5f       	subi	r25, 0xFF	; 255
 cc8:	c1 f7       	brne	.-16     	; 0xcba <__mulsf3_pse+0x8c>
 cca:	fe 2b       	or	r31, r30
 ccc:	88 0f       	add	r24, r24
 cce:	91 1d       	adc	r25, r1
 cd0:	96 95       	lsr	r25
 cd2:	87 95       	ror	r24
 cd4:	97 f9       	bld	r25, 7
 cd6:	08 95       	ret

00000cd8 <__divmodsi4>:
 cd8:	05 2e       	mov	r0, r21
 cda:	97 fb       	bst	r25, 7
 cdc:	16 f4       	brtc	.+4      	; 0xce2 <__divmodsi4+0xa>
 cde:	00 94       	com	r0
 ce0:	0f d0       	rcall	.+30     	; 0xd00 <__negsi2>
 ce2:	57 fd       	sbrc	r21, 7
 ce4:	05 d0       	rcall	.+10     	; 0xcf0 <__divmodsi4_neg2>
 ce6:	23 d0       	rcall	.+70     	; 0xd2e <__udivmodsi4>
 ce8:	07 fc       	sbrc	r0, 7
 cea:	02 d0       	rcall	.+4      	; 0xcf0 <__divmodsi4_neg2>
 cec:	46 f4       	brtc	.+16     	; 0xcfe <__divmodsi4_exit>
 cee:	08 c0       	rjmp	.+16     	; 0xd00 <__negsi2>

00000cf0 <__divmodsi4_neg2>:
 cf0:	50 95       	com	r21
 cf2:	40 95       	com	r20
 cf4:	30 95       	com	r19
 cf6:	21 95       	neg	r18
 cf8:	3f 4f       	sbci	r19, 0xFF	; 255
 cfa:	4f 4f       	sbci	r20, 0xFF	; 255
 cfc:	5f 4f       	sbci	r21, 0xFF	; 255

00000cfe <__divmodsi4_exit>:
 cfe:	08 95       	ret

00000d00 <__negsi2>:
 d00:	90 95       	com	r25
 d02:	80 95       	com	r24
 d04:	70 95       	com	r23
 d06:	61 95       	neg	r22
 d08:	7f 4f       	sbci	r23, 0xFF	; 255
 d0a:	8f 4f       	sbci	r24, 0xFF	; 255
 d0c:	9f 4f       	sbci	r25, 0xFF	; 255
 d0e:	08 95       	ret

00000d10 <__umulhisi3>:
 d10:	a2 9f       	mul	r26, r18
 d12:	b0 01       	movw	r22, r0
 d14:	b3 9f       	mul	r27, r19
 d16:	c0 01       	movw	r24, r0
 d18:	a3 9f       	mul	r26, r19
 d1a:	70 0d       	add	r23, r0
 d1c:	81 1d       	adc	r24, r1
 d1e:	11 24       	eor	r1, r1
 d20:	91 1d       	adc	r25, r1
 d22:	b2 9f       	mul	r27, r18
 d24:	70 0d       	add	r23, r0
 d26:	81 1d       	adc	r24, r1
 d28:	11 24       	eor	r1, r1
 d2a:	91 1d       	adc	r25, r1
 d2c:	08 95       	ret

00000d2e <__udivmodsi4>:
 d2e:	a1 e2       	ldi	r26, 0x21	; 33
 d30:	1a 2e       	mov	r1, r26
 d32:	aa 1b       	sub	r26, r26
 d34:	bb 1b       	sub	r27, r27
 d36:	fd 01       	movw	r30, r26
 d38:	0d c0       	rjmp	.+26     	; 0xd54 <__udivmodsi4_ep>

00000d3a <__udivmodsi4_loop>:
 d3a:	aa 1f       	adc	r26, r26
 d3c:	bb 1f       	adc	r27, r27
 d3e:	ee 1f       	adc	r30, r30
 d40:	ff 1f       	adc	r31, r31
 d42:	a2 17       	cp	r26, r18
 d44:	b3 07       	cpc	r27, r19
 d46:	e4 07       	cpc	r30, r20
 d48:	f5 07       	cpc	r31, r21
 d4a:	20 f0       	brcs	.+8      	; 0xd54 <__udivmodsi4_ep>
 d4c:	a2 1b       	sub	r26, r18
 d4e:	b3 0b       	sbc	r27, r19
 d50:	e4 0b       	sbc	r30, r20
 d52:	f5 0b       	sbc	r31, r21

00000d54 <__udivmodsi4_ep>:
 d54:	66 1f       	adc	r22, r22
 d56:	77 1f       	adc	r23, r23
 d58:	88 1f       	adc	r24, r24
 d5a:	99 1f       	adc	r25, r25
 d5c:	1a 94       	dec	r1
 d5e:	69 f7       	brne	.-38     	; 0xd3a <__udivmodsi4_loop>
 d60:	60 95       	com	r22
 d62:	70 95       	com	r23
 d64:	80 95       	com	r24
 d66:	90 95       	com	r25
 d68:	9b 01       	movw	r18, r22
 d6a:	ac 01       	movw	r20, r24
 d6c:	bd 01       	movw	r22, r26
 d6e:	cf 01       	movw	r24, r30
 d70:	08 95       	ret

00000d72 <_exit>:
 d72:	f8 94       	cli

00000d74 <__stop_program>:
 d74:	ff cf       	rjmp	.-2      	; 0xd74 <__stop_program>
